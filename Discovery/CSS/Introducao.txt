# Introdu√ß√£o

- O que significa CSS?

* Cascading Style Sheet
* C√≥digo para criar estilos no HTML
* HTML √© a estrutura, e o CSS √© a beleza
* N√£o √© uma linguagem  de programa√ß√£o
* √â uma linguagem style sheet 

## Vamos ao Exemplo

# Coment√°rios 

* N√£o ir√° afetar o seu c√≥digo 
* Ajuda a lembrar blocos de c√≥digos
* Deixa dicas para leitura 
* Ajuda outros a entenderem 
* Nunca esque√ßa de fechar um coment√°rio aberto 

Coment√°rios come√ßam com `/*` e terminam `*/`.

# Anatomia

h1 {
  color: blue;
  font-size: 60px;
  backdround: gray; 
}

* Selector 
* Declaration 
* Properties
* Property Value 

# Seletores 

Conecta um elemento HTML com o CSS

## Tipos 

* Global Selector `*`
* Element/Type selector ` h1,h2, p , div`
* Id Selector `#box, #container`
* Class Selector `.red, .m-4`
* Attribute selector, Pseudo-class, pseudo-element, e outros 


# Box Model 

Trabalhamos com telas , com a montagem de caixas

* Voc√™ ir√° perceber que (quase) tudo s√£o caixas do CSS
* Posicionamentos, tamanhos, espa√ßamentos, bordas, Cores
* Caixa pode ficar ao lado uma da outra , ou em cima 
* Elementos HTML s√£o caixas 


# Origem do CSS
- Adicionando CSS

# inline 
* atributo`style`

<h1 style="color:red"> </h1>

# <style>
*tag html que ir√° conter o css

<style>

h1{
  color:red;
}
 </style>

# <link>
* arquivo css externo
<link rel="stylesheet" href="style.css">

# @import(regra)
* arquivo css externo 

# A Cascata (cascading)

A escolha do browser de qual regra aplicar, caso haja muitas regras para o mesmo elemento.
* Seu estilo √© lido de cima para baixo. 
√â levado em considera√ß√£o 3 fatores 

1. Origem do estilo 
2. Especificidade
3. Import√¢ncia

## Origem do estilo 

inline > tag style > tag link

### Especificidade 

√â um c√°lculo matem√°tico, onde, cada tipo de seletor e origem do estilo, possuem valores a serem considerados. 
0. Universal selector, combinators e negation pseudo-class (:not())
1. Element type selector e pseudos-elements(::before, ::after)
10. Classes e attribute selectors([type="redio"])
100. ID selector
1000. Inline 

# Regra important 
sintaxe: !important

* cuidado, evite o uso 
* n√£o √© considerado uma boa pr√°tica
* quebra o fluxo natural da cascata 

S√£o raras as ocasi√µes nas quais se devem usar um iportant, pois √© em geral uma m√° pratica, visto que quebra o fluxo natural da cascata e pode acabar te atrapalhando caso voc√™ a deixe em algum lugar no seu c√≥digo.

Portanto evite ao m√°ximo seu uso.

# At Rules 

* Est√° relacionado ao comportamento do CSS
* Come√ßa com sinal de `@` seguido de indentificador e valor 

## Exemplos Comuns 

-@import  /** incluir um CSS externo */

-@media \* regras condicionais para dispositivos */

-@font-face \* fontes externas */

-@key-frames \* Anima√ß√£o */


# ShortThand

*Jun√ß√£o de propriedades
*resumido
*legivel

Algumas das caracter√≠sticas do shorthand:
N√£o ir√° considerar propriedades anteriores, ou seja, caso fa√ßa um shorthand, apenas ele ser√° considerado, quaisquer propriedades anteriores ser√£o substitu√≠das pelas do shorthand.

Os valores que n√£o forem especificados ir√£o assumir o valor padr√£o.

Por fim, geralmente, a ordem descrita n√£o importa, mas, caso haja muitas propriedades com valores semelhantes, poderemos encontrar problemas.

## Detalhes 
* N√£o ir√° considerar propriedades anteriores 
* valores n√£o especificados ir√£o assumir o valor padr√£o 
* geralmente, a ordem descrita n√£o importa, mas, se houver muitas propriedades com valores semelhantes, poderemos encontrar problemas. 

## Propriedades que aceitam shorthand. 

site css - mozila 


# Fun√ßoes 

* Nome seguido de abre e fecha parentesis 
* recebe argumentos 

# DevTools 

Ferramenta - Uma das ferramentas mais importantes para o desenvolvedor CSS √© o DevTools (do ingl√™s, Ferramentas de Desenvolvedor), √© recomendado que voc√™ estude e fa√ßa uso da mesma, pois ser√° muito utilizada.

# Cuidados com a escrita

√â importante prestar aten√ß√£o √† sua escrita do CSS, identar seu c√≥digo para facilitar a leitura, e mais importante, manter tudo organizado e funcionando!

# Vendor Prefixes 

S√£o coisas que permitem que browsers adiocionem features a fim de colocar em uso alguma novidade que vemos no CSS.

Exemplos:
p {
	-webkit-background-clip: text; /*Chrome, Safari, iOS e Android*/
	-moz-background-clip: text; /* Mozilla (Firefox) */
	-ms-background-clip: text; /* Internet Explorer ou Edge*/
	-o-background-clip: text; /* Opera */
Voc√™ tamb√©m pode consultar se a feature pode ser utilizada atrav√©s dos sites:
https://ireade.github.io/which-vendor-prefix

https://caniuse.com




**Adjacent sibling combinator
Identificado pelo sinal + entre dois seletores
Seleciona somente o elemento do lado direito que √© irm√£o direto na hierarquia
HTML

<h1>
  T√≠tulo
</h1>
<p>
  Esse √© um par√°grafo
</p>
<p>
  Mais um par√°grafo
</p>
CSS

h1 + p {
	color: red;
}
### General sibling combinator
Identificado pelo sinal ~ entre dois seletores
Seleciona todos os elementos irm√£os
HTML

<h1>
  T√≠tulo
</h1>
<p>
  Esse √© um par√°grafo
</p>
<p>
  Mais um par√°grafo
</p>
CSS

h1 ~ p {
	color: red;
}

##Utilizando combinadores
HTML

<ul>
  <li>Alooo</li>
  <li class="red">Hey</li>
</ul>
CSS

ul > li[class="red"] {
	color: red;
}
Dica:
Seletores muito espec√≠ficos tendem a causar dificuldades no reuso das regras de estiliza√ß√£o
Muitas vezes, um simples uso de classes, torna o trabalho mais eficiente

###Pseudo-classes
Descri√ß√£o
√â um tipo de seletor que ir√° selecionar um elemento que estiver em um estado espec√≠fico.

Exemplo: √â o primeiro elemento dentro de uma caixa, ou, o elemento est√° com o ponteiro do mouse sobre ele.

Pseudo-classes come√ßam com 2 pontos seguido do nome da pseudo class :pseudo-class-name

###first-child
Descri√ß√£o
:first-child
√â quando queremos selecionar o primeiro filho de um grupo de elementos.

HTML

<ul>
  <li>Gratid√£o</li>
  <li>Esperan√ßa</li>
  <li>F√©</li>
</ul>
CSS

ul li:first-child {
  font-weight: bold;
}

## :nth-of-type()
Pega o elemento por tipo e posi√ß√£o

HTML

<ul>
  <h3>Palavras bonitas</h3>
  <li>Gratid√£o</li>
  <li>Esperan√ßa</li>
  <li>F√©</li>
</ul>
CSS

ul li:nth-of-type(1) {
  font-weight: bold;
}

## :nth-child()
√â quando queremos selecionar o primeiro filho de um grupo de elementos.

HTML

<ul>
	<h3>Palavras bonitas</h3>
  <li>Gratid√£o</li>
  <li>Esperan√ßa</li>
  <li>F√©</li>
</ul>
CSS

ul li:nth-child(2) {
  font-weight: bold;
}

## nth-child odd e even
Descri√ß√£o
:nth-child(odd) e :nth-child(even)
even - n√∫meros pares
odd - n√∫meros √≠mpares
HTML

<ul>
  <li>Gratid√£o</li>
  <li>Esperan√ßa</li>
  <li>F√©</li>
  <li>Liberdade</li>
</ul>
CSS

ul li:nth-child(odd) {
  color: gray;
}

## hover e focus
Descri√ß√£o
A√ß√µes do usu√°rio
Algumas estilos s√≥ s√£o aplicados quando o usu√°rio faz alguma a√ß√£o na p√°gina.

:hover

a:hover {
  color: red;
}
Vai mudar a cor do link para vermelho quando o usu√°rio passar o mouse sobre o link

:focus √© aplicado quando o elemento recebe o foco da a√ß√£o do usu√°rio que pode ser feita utilizando o teclado ou clicando no elemento com o mouse. √â comumente usado em campos de input como uma forma de mostrar qual o input "ativo".

input:focus {
  border-color: red;
}

## disabled e required
Descri√ß√£o
Tamb√©m podemos usar atributos para selecionar elementos no CSS

Atributos
:disabled

HTML

<input type="text" disabled>
CSS

input:disabled {
  background-color: green;
}
:required

HTML

<input type="text" required>
CSS

input:required {
  background-color: red;
}

Pseudo-elements
Descri√ß√£o
Pseudo-elements
Com pseudo-elements n√≥s podemos adicionar elementos HTML pelo pr√≥prio CSS

::pseudo-element-name

üíª Exemplos
::before adiciona um pseudo-elemento antes do elemento selecionado.

HTML

<ul>
  <li>Gratid√£o</li>
  <li>Esperan√ßa</li>
  <li>F√©</li>
  <li>Liberdade</li>
</ul>
CSS

li::before {
  content: "> "
}
::after adiciona um pseudo-elemento depois do elemento selecionado.

li::after{
  content: ";"
}
Tanto para o ::before quanto para o ::after √© preciso adicionar o content, mesmo que ele seja vazio content = "";

::first-line pega a primeira linha de um texto.

p::first-line {
	font-weight: bold;
}
Refer√™ncia
https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements